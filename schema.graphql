input ActivateClosedChatRoomInput {
	chatRoomId: String!
	clientId: String!
	lastMessageContent: String!
}

type ActivateClosedChatRoomOutput @aws_api_key {
	chatRoomId: String
	chatRoomStatus: String
	channelId: String
	channel: ChannelOutput
	client: ClientOutput
	organizationsIds: [String]
	lastMessageContent: String
	lastMessageDateTime: String
	lastMessageFromClientDateTime: String
	unreadMessagesNumber: Int
}

input AssignChatRoomOperatorInput {
	chatRoomId: String!
	operatorId: String!
	clientId: String!
	roleTechnicalName: String!
}

type AssignChatRoomOperatorOutput @aws_api_key {
	chatRoomId: String
	channelId: String
	chatRoomStatus: String
	operator: OperatorOutput
}

input ChannelInput {
	channelId: String
}

type ChannelOutput @aws_api_key {
	channelId: String
	channelName: String
	channelDescription: String
	channelTechnicalId: String
	channelType: ChannelTypeOutput
}

enum ChannelTypeNameOutput {
	widget
	dashboard
	telegram
	whatsapp
}

type ChannelTypeOutput @aws_api_key {
	channelTypeId: String
	channelTypeName: String
	channelTypeDescription: String
}

type ChatRoomClientOutput @aws_api_key {
	chatRoomMemberSinceDateTime: String
	userType: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	gender: GenderOutput
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
    instagramPrivateUsername: String
}

type ChatRoomMessage @aws_api_key {
	messageCreatedDateTime: String
	messageUpdatedDateTime: String
	messageDeletedDateTime: String
	messageIsSent: Boolean
	messageIsDelivered: Boolean
	messageIsRead: Boolean
	messageId: String
	messageAuthorId: String
	messageChannelId: String
	messageText: String
	messageContent: String
	quotedMessage: QuotedMessageOutput
}

type ChatRoomOperatorsOutput @aws_api_key {
	chatRoomMemberSinceDateTime: String
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

type ClientOutput @aws_api_key {
	userType: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	gender: GenderOutput
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
    instagramPrivateUsername: String
}

type ClientsOutput @aws_api_key {
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userType: String
	createdDateTime: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
	gender: GenderOutput
}

input CloseChatRoomInput {
	chatRoomId: String!
	operatorId: String!
	channelId: String!
}

type CloseChatRoomOutput @aws_api_key {
	chatRoomId: String
	channelId: String
	chatRoomStatus: String
	operator: OperatorOutput
}

input CreateChatRoomInput {
	channelTechnicalId: String!
	channelTypeName: String!
	clientId: String!
	lastMessageContent: String!
	telegramChatId: String
	whatsappChatId: String
	facebookMessengerChatId: String
    instagramPrivateChatId: String
    vkChatId: String
}

input CreateChatRoomMessageInput {
	chatRoomId: String!
	messageAuthorId: String!
	messageChannelId: String!
	messageText: String
	messageContent: String
	quotedMessage: QuotedMessageInput
	localMessageId: String
	isClient: Boolean!
}

type CreateChatRoomMessageOutput @aws_api_key {
	channelId: String
	channelTypeName: String
	chatRoomId: String
	chatRoomStatus: String
	messageCreatedDateTime: String
	messageUpdatedDateTime: String
	messageDeletedDateTime: String
	messageIsSent: Boolean
	messageIsDelivered: Boolean
	messageIsRead: Boolean
	messageId: String
	messageAuthorId: String
	messageChannelId: String
	messageText: String
	messageContent: String
	quotedMessage: QuotedMessageOutput
	localMessageId: String
}

type CreateChatRoomOutput @aws_api_key {
	chatRoomId: String
	chatRoomStatus: String
	channel: ChannelOutput
	channelId: String
	client: ClientOutput
	organizationsIds: [String]
	lastMessageContent: String
	lastMessageDateTime: String
	lastMessageFromClientDateTime: String
	unreadMessagesNumber: Int
}

input CreateIdentifiedUserInput {
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	genderId: String
	metadata: String!
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
    instagramPrivateUsername: String
}

type CreateIdentifiedUserOutput @aws_api_key {
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	gender: GenderOutput
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
}

input CreateInternalUserInput {
	auth0UserId: String
	auth0Metadata: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String!
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	genderId: String
	roleId: String
	organizationId: String
	password: String!
}

type CreateInternalUserOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

input CreateUnidentifiedUserInput {
	metadata: String!
}

type CreateUnidentifiedUserOutput @aws_api_key {
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	metadata: String
}

input DeleteClientsInput {
	usersIds: [String!]!
}

type DeleteClientsOutput @aws_api_key {
	usersIds: [String]
}

input DeleteInternalUsersInput {
	usersIds: [String!]!
}

type DeleteInternalUsersOutput @aws_api_key {
	usersIds: [String]
}

type DeletedInternalUsersOutput @aws_api_key {
	createdDateTime: String
	deletedDateTime: String
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

type GenderOutput @aws_api_key {
	genderId: String
	genderTechnicalName: String
	genderPublicName: String
}

type GetAcceptedChatRoomsOutput @aws_api_key {
	chatRoomId: String
	lastMessageContent: String
	lastMessageDateTime: String
	lastMessageFromClientDateTime: String
	unreadMessagesNumber: Int
	channel: ChannelOutput
	client: ClientOutput
}

type GetChannelOnlineOperatorsOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

type GetChannelsTypesAndChannelsOutput @aws_api_key {
	channelTypeId: String
	channelTypeName: String
	channelTypeDescription: String
	channels: [NonNestedChannelOutput]
}

type GetChatRoomInformationOutput @aws_api_key {
	chatRoomId: String
	chatRoomStatus: String
	channel: ChannelOutput
	chatRoomClient: ChatRoomClientOutput
	chatRoomOperators: [ChatRoomOperatorsOutput]
}

type GetChatRoomMessagesOutput @aws_api_key {
	pagingState: String
	chatRoomMessages: [ChatRoomMessage]
}

type GetClientChatRoomsOutput @aws_api_key {
	chatRoomMemberSinceDateTime: String
	chatRoomId: String
	chatRoomStatus: String
	operator: OperatorOutput
	lastMessageContent: String
	lastMessageDateTime: String
}

type GetClientOutput @aws_api_key {
	createdDateTime: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userType: String
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
	gender: GenderOutput
}

type GetClientsOutput @aws_api_key {
	clients: [ClientsOutput]
	pageInformation: PageInformation!
}

type PageInformation @aws_api_key {
    currentPageNumber: Int!
    itemsCountPerPage: Int!
    totalItemsCount: Int!
}

type GetCompletedChatRoomsOutput @aws_api_key {
	chatRoomId: String
	lastMessageContent: String
	lastMessageDateTime: String
	lastMessageFromClientDateTime: String
	unreadMessagesNumber: Int
	channel: ChannelOutput
	client: ClientOutput
}

type GetDeletedInternalUsersOutput @aws_api_key {
	internalUsers: [DeletedInternalUsersOutput]
	pageInformation: PageInformation!
}

type GetInternalUserOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

type GetInternalUsersOutput @aws_api_key {
	internalUsers: [InternalUsersOutput]
	pageInformation: PageInformation!
}

type GetNonAcceptedChatRoomsOutput @aws_api_key {
	chatRoomId: String
	lastMessageContent: String
	lastMessageDateTime: String
	lastMessageFromClientDateTime: String
	unreadMessagesNumber: Int
	channel: ChannelOutput
	client: ClientOutput
}

type GetRolesOutput @aws_api_key {
	roleId: String
	roleTechnicalName: String
	rolePublicName: String
	roleDescription: String
}

type InternalUsersOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

enum MessageStatusOutput {
	MESSAGE_IS_SENT
	MESSAGE_IS_DELIVERED
	MESSAGE_IS_READ
}

type Mutation {
	# Создать сообщение в чат комнате.
	createChatRoomMessage(input: CreateChatRoomMessageInput): CreateChatRoomMessageOutput
		@aws_api_key
	# Создать чат комнату.
	createChatRoom(input: CreateChatRoomInput): CreateChatRoomOutput
		@aws_api_key
	# Назначить оператора ответственным за чат комнату.
	assignChatRoomOperator(input: AssignChatRoomOperatorInput): AssignChatRoomOperatorOutput
		@aws_api_key
	# Закрыть чат комнату после завершения диалога между оператором и клиентам.
	closeChatRoom(input: CloseChatRoomInput): CloseChatRoomOutput
		@aws_api_key
	# Активировать закрытую чат комнату, когда в неё пишет клиент.
	activateClosedChatRoom(input: ActivateClosedChatRoomInput): ActivateClosedChatRoomOutput
		@aws_api_key
	# Обновлять статус отправки сообщения в чат комнате.
	updateMessageSendingStatus(input: UpdateMessageSendingStatusInput): UpdateMessageSendingStatusOutput
		@aws_api_key
	# Создать нового идентифицированного пользователя.
	createIdentifiedUser(input: CreateIdentifiedUserInput): CreateIdentifiedUserOutput
		@aws_api_key
	# Создать нового внутреннего пользователя.
	createInternalUser(input: CreateInternalUserInput): CreateInternalUserOutput
		@aws_api_key
	# Создать нового неидентифицированного пользователя.
	createUnidentifiedUser(input: CreateUnidentifiedUserInput): CreateUnidentifiedUserOutput
		@aws_api_key
	# Обновить информацию идентифицированного пользователя.
	updateIdentifiedUser(input: UpdateIdentifiedUserInput): UpdateIdentifiedUserOutput
		@aws_api_key
	# Обновить информацию внутреннего пользователя.
	updateInternalUser(input: UpdateInternalUserInput): UpdateInternalUserOutput
		@aws_api_key
	# Обновить информацию неидентифицированного пользователя.
	updateUnidentifiedUser(input: UpdateUnidentifiedUserInput): UpdateUnidentifiedUserOutput
		@aws_api_key
	# Обновлять статус сообщения и количество непрочитанных сообщений в чат комнате.
	updateMessageData(input: UpdateMessageDataInput): UpdateMessageDataOutput
		@aws_api_key
	# Переквалифицировать неидентифицированного пользователя в идентифицированного.
	requalifyClient(input: RequalifyClientInput): RequalifyClientOutput
		@aws_api_key
	# Удалить один или несколько клиентов.
	deleteClients(input: DeleteClientsInput): DeleteClientsOutput
		@aws_api_key
	# Удалить один или несколько внутренних пользователей.
	deleteInternalUsers(input: DeleteInternalUsersInput): DeleteInternalUsersOutput
		@aws_api_key
	# Восстановить ранее удаленных внутренних пользователей.
	restoreDeletedInternalUsers(input: RestoreDeletedInternalUsersInput): RestoreDeletedInternalUsersOutput
		@aws_api_key
}

type NonNestedChannelOutput @aws_api_key {
	channelId: String
	channelName: String
	channelDescription: String
	channelTechnicalId: String
}

type OperatorOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

type OrganizationOutput @aws_api_key {
	organizationId: String
	organizationName: String
	organizationLevel: Int
	parentOrganizationId: String
	parentOrganizationName: String
	parentOrganizationLevel: Int
	rootOrganizationId: String
	rootOrganizationName: String
	rootOrganizationLevel: Int
	treeOrganizationId: String
	treeOrganizationName: String
}

type Query {
	# Получить список сообщений чат комнаты.
	getChatRoomMessages(chatRoomId: String!, fetchSize: Int! = 100, pagingState: String): GetChatRoomMessagesOutput
		@aws_api_key
	# Получить список типов каналов и каналов, которые может обслужить внутренний пользователь.
	getChannelsTypesAndChannels(userId: String!): [GetChannelsTypesAndChannelsOutput]
		@aws_api_key
	# Получить полную информацию чат комнаты.
	getChatRoomInformation(chatRoomId: String!): GetChatRoomInformationOutput
		@aws_api_key
	# Получить список непринятых в работу чат комнат.
	getNonAcceptedChatRooms(
		organizationId: String!,
		channelsIds: [String!]!,
		startDateTime: String,
		endDateTime: String
	): [GetNonAcceptedChatRoomsOutput]
		@aws_api_key
	# Получить список принятых в работу чат комнат.
	getAcceptedChatRooms(
		operatorId: String!,
		channelsIds: [String!]!,
		startDateTime: String,
		endDateTime: String
	): [GetAcceptedChatRoomsOutput]
		@aws_api_key
	# Получить список завершенных диалогов.
	getCompletedChatRooms(
		operatorId: String!,
		channelsIds: [String!]!,
		startDateTime: String,
		endDateTime: String
	): [GetCompletedChatRoomsOutput]
		@aws_api_key
	# Получить данные о внутреннем пользователе.
	getInternalUser(auth0UserId: String!): GetInternalUserOutput
		@aws_api_key
	# Получить список внутренних пользователей определенной организации.
	getInternalUsers(rootOrganizationId: String!, currentPageNumber: Int!, itemsCountPerPage: Int!): GetInternalUsersOutput
		@aws_api_key
	# Получить список доступных ролей в системе.
	getRoles: [GetRolesOutput]
		@aws_api_key
	# Получить данные о клиенте.
	getClient(userId: String!): GetClientOutput
		@aws_api_key
	# Получить список онлайн операторов, которые могут обслужить канал.
	getChannelOnlineOperators(
		channelTechnicalId: String!,
		channelTypeName: ChannelTypeNameOutput!,
		currentPageNumber: Int!,
		recordsNumber: Int!
	): [GetChannelOnlineOperatorsOutput]
		@aws_api_key
	# Получить список чат комнат в рамках канала определенного клиента.
	getClientChatRooms(
		channelTechnicalId: String!,
		channelTypeName: ChannelTypeNameOutput!,
		clientId: String!,
		currentPageNumber: Int!,
		recordsNumber: Int!
	): [GetClientChatRoomsOutput]
		@aws_api_key
	# Получить список клиентов определенной организации.
	getClients(rootOrganizationId: String!, currentPageNumber: Int!, itemsCountPerPage: Int!): GetClientsOutput
		@aws_api_key
	# Получить список удаленных внутренних пользователей.
	getDeletedInternalUsers(rootOrganizationId: String!, currentPageNumber: Int!, itemsCountPerPage: Int!): GetDeletedInternalUsersOutput
		@aws_api_key
}

input QuotedMessageInput {
	messageId: String
	messageAuthorId: String
	messageChannelId: String
	messageText: String
	messageContent: String
}

type QuotedMessageOutput @aws_api_key {
	messageId: String
	messageAuthorId: String
	messageChannelId: String
	messageText: String
	messageContent: String
}

input RequalifyClientInput {
	userId: String!
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	genderId: String
	metadata: String!
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
}

type RequalifyClientOutput @aws_api_key {
	createdDateTime: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userType: String
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
	gender: GenderOutput
}

input RestoreDeletedInternalUsersInput {
	usersIds: [String!]!
}

type RestoreDeletedInternalUsersOutput @aws_api_key {
	usersIds: [String]
}

type RoleOutput @aws_api_key {
	roleId: String
	roleTechnicalName: String
	rolePublicName: String
	roleDescription: String
}

type Subscription {
	# Следить за новым созданным сообщением по id чат комнаты.
	watchCreateChatRoomMessageByChatRoomId(chatRoomId: String!): CreateChatRoomMessageOutput
		@aws_api_key
@aws_subscribe(mutations: ["createChatRoomMessage"])
	# Следить за новым созданным сообщением по id канала.
	watchCreateChatRoomMessageByChannelId(channelId: String!): CreateChatRoomMessageOutput
		@aws_api_key
@aws_subscribe(mutations: ["createChatRoomMessage"])
	# Следить за обновлениями статуса отправки сообщение в чат комнатах по id чат комнаты.
	watchUpdateMessageSendingStatusByChatRoomId(chatRoomId: String!): UpdateMessageSendingStatusOutput
		@aws_api_key
@aws_subscribe(mutations: ["updateMessageSendingStatus"])
	# Следить за обновлениями статуса отправки сообщение в чат комнатах по id канала.
	watchUpdateMessageSendingStatusByChannelId(channelId: String!): UpdateMessageSendingStatusOutput
		@aws_api_key
@aws_subscribe(mutations: ["updateMessageSendingStatus"])
	# Следить за созданными и не принятыми в работу чат комнатами.
	watchCreateChatRoom(channelId: String!): CreateChatRoomOutput
		@aws_api_key
@aws_subscribe(mutations: ["createChatRoom"])
	# Следить за назначением оператора в определенную чат комнатами по id чат комнаты.
	watchAssignChatRoomOperatorByChatRoomId(chatRoomId: String!): AssignChatRoomOperatorOutput
		@aws_api_key
@aws_subscribe(mutations: ["assignChatRoomOperator"])
	# Следить за назначением оператора в определенную чат комнатами по id канала.
	watchAssignChatRoomOperatorByChannelId(channelId: String!): AssignChatRoomOperatorOutput
		@aws_api_key
@aws_subscribe(mutations: ["assignChatRoomOperator"])
	# Следить за закрытием чат комнаты после завершения диалога по id чат комнаты.
	watchCloseChatRoomByChatRoomId(chatRoomId: String!): CloseChatRoomOutput
		@aws_api_key
@aws_subscribe(mutations: ["closeChatRoom"])
	# Следить за закрытием чат комнаты после завершения диалога по id канала.
	watchCloseChatRoomByChannelId(channelId: String!): CloseChatRoomOutput
		@aws_api_key
@aws_subscribe(mutations: ["closeChatRoom"])
	# Получить информацию о чат комнате, которую активизировали.
	watchActivateClosedChatRoom(channelId: String!): ActivateClosedChatRoomOutput
		@aws_api_key
@aws_subscribe(mutations: ["activateClosedChatRoom"])
	# Получить информацию об обновленном статусе сообщений из определенной чат комнаты по id чат комнаты.
	watchUpdateMessageDataByChatRoomId(chatRoomId: String!): UpdateMessageDataOutput
		@aws_api_key
@aws_subscribe(mutations: ["updateMessageData"])
	# Получить информацию об обновленном статусе сообщений из определенной чат комнаты по id канала.
	watchUpdateMessageDataByChannelId(channelId: String!): UpdateMessageDataOutput
		@aws_api_key
@aws_subscribe(mutations: ["updateMessageData"])
}

input UpdateIdentifiedUserInput {
	userId: String!
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	genderId: String
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
}

type UpdateIdentifiedUserOutput @aws_api_key {
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	gender: GenderOutput
	metadata: String
	telegramUsername: String
	whatsappProfile: String
	whatsappUsername: String
	instagramPrivateUsername: String
}

input UpdateInternalUserInput {
	auth0UserId: String!
	auth0Metadata: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	genderId: String
	roleId: String
	organizationId: String
	password: String
}

type UpdateInternalUserOutput @aws_api_key {
	auth0UserId: String
	auth0Metadata: String
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	userFirstName: String
	userLastName: String
	userMiddleName: String
	userPrimaryEmail: String
	userSecondaryEmail: [String]
	userPrimaryPhoneNumber: String
	userSecondaryPhoneNumber: [String]
	userPositionName: String
	gender: GenderOutput
	role: RoleOutput
	organization: OrganizationOutput
}

input UpdateMessageDataInput {
	chatRoomId: String!
	messagesIds: [String!]!
	messageStatus: MessageStatusOutput!
	isClient: Boolean!
}

type UpdateMessageDataOutput @aws_api_key {
	chatRoomId: String
	channelId: String
	chatRoomStatus: String
	chatRoomMessages: [ChatRoomMessage]
	unreadMessagesNumber: Int
	channelTypeName: String
	isClient: Boolean
}

input UpdateMessageSendingStatusInput {
	chatRoomId: String!
	channelId: String!
	userId: String!
	actionDescription: String!
	messageText: String
}

type UpdateMessageSendingStatusOutput @aws_api_key {
	chatRoomId: String
	channelId: String
	userId: String
	actionDescription: String
	messageText: String
}

input UpdateUnidentifiedUserInput {
	userId: String!
	metadata: String!
}

type UpdateUnidentifiedUserOutput @aws_api_key {
	userId: String
	userNickname: String
	userProfilePhotoUrl: String
	metadata: String
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}